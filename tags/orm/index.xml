<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>刘雨飏@ANAS联盟</title>
    <link>https://cio.anasit.com/tags/orm/index.xml</link>
    <description>Recent content on 刘雨飏@ANAS联盟</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>©2007-2016 Ryn&#39;s Blog</copyright>
    <atom:link href="https://cio.anasit.com/tags/orm/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Golang database/sql &amp; GORM</title>
      <link>https://cio.anasit.com/cookbook/backend/golangsqlorm/</link>
      <pubDate>Thu, 08 Oct 2015 15:05:51 +0800</pubDate>
      
      <guid>https://cio.anasit.com/cookbook/backend/golangsqlorm/</guid>
      <description>

&lt;h1 id=&#34;0-models写法技巧及migration标准&#34;&gt;0.Models写法技巧及Migration标准&lt;/h1&gt;

&lt;h2 id=&#34;法则&#34;&gt;法则&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;基本满足大驼峰命名法则&lt;/strong&gt;
首字母大写
&amp;ldquo;_&amp;rdquo; 忽略后大写&lt;/p&gt;

&lt;h2 id=&#34;实例&#34;&gt;实例&lt;/h2&gt;

&lt;p&gt;device_id 对应 DeviceID
create_time 对应 CreateTime
location 对应 Location&lt;/p&gt;

&lt;h2 id=&#34;官方实例&#34;&gt;官方实例&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type User struct {
    ID           int
    Birthday     time.Time
    Age          int
    Name         string  `sql:&amp;quot;size:255&amp;quot;` // Default size for string is 255, you could reset it with this tag
    Num          int     `sql:&amp;quot;AUTO_INCREMENT&amp;quot;`
    CreatedAt    time.Time
    UpdatedAt    time.Time
    DeletedAt    *time.Time

    Emails            []Email         // One-To-Many relationship (has many)
    BillingAddress    Address         // One-To-One relationship (has one)
    BillingAddressID  sql.NullInt64   // Foreign key of BillingAddress
    ShippingAddress   Address         // One-To-One relationship (has one)
    ShippingAddressID int             // Foreign key of ShippingAddress
    IgnoreMe          int `sql:&amp;quot;-&amp;quot;`   // Ignore this field
    Languages         []Language `gorm:&amp;quot;many2many:user_languages;&amp;quot;` // Many-To-Many relationship, &#39;user_languages&#39; is join table
}

type Email struct {
    ID      int
    UserID  int     `sql:&amp;quot;index&amp;quot;` // Foreign key (belongs to), tag `index` will create index for this field when using AutoMigrate
    Email   string  `sql:&amp;quot;type:varchar(100);unique_index&amp;quot;` // Set field&#39;s sql type, tag `unique_index` will create unique index
    Subscribed bool
}

type Address struct {
    ID       int
    Address1 string         `sql:&amp;quot;not null;unique&amp;quot;` // Set field as not nullable and unique
    Address2 string         `sql:&amp;quot;type:varchar(100);unique&amp;quot;`
    Post     sql.NullString `sql:&amp;quot;not null&amp;quot;`
}

type Language struct {
    ID   int
    Name string `sql:&amp;quot;index:idx_name_code&amp;quot;` // Create index with name, and will create combined index if find other fields defined same name
    Code string `sql:&amp;quot;index:idx_name_code&amp;quot;` // `unique_index` also works
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;1-gorm实践&#34;&gt;1.GORM实践&lt;/h1&gt;

&lt;h2 id=&#34;数据库&#34;&gt;数据库&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;MariaDB [zwjj]&amp;gt; desc zw_device;
+-------------+---------------------+------+-----+---------+----------------+
| Field       | Type                | Null | Key | Default | Extra          |
+-------------+---------------------+------+-----+---------+----------------+
| device_id   | int(10) unsigned    | NO   | PRI | NULL    | auto_increment |
| user_id     | int(10)             | YES  |     | NULL    |                |
| device_sn   | varchar(32)         | NO   |     | NULL    |                |
| device_imei | varchar(32)         | NO   |     | NULL    |                |
| description | text                | NO   |     | NULL    |                |
| sort        | int(10) unsigned    | NO   |     | NULL    |                |
| type        | tinyint(1) unsigned | NO   |     | 0       |                |
| status      | tinyint(1)          | NO   |     | 1       |                |
| location    | varchar(32)         | YES  |     | NULL    |                |
| lat         | varchar(255)        | YES  |     | NULL    |                |
| lng         | varchar(125)        | NO   |     | NULL    |                |
| last_time   | int(10) unsigned    | NO   |     | NULL    |                |
| create_time | int(10) unsigned    | NO   |     | NULL    |                |
+-------------+---------------------
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;import&#34;&gt;import&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-golang&#34;&gt;import(
        &amp;quot;fmt&amp;quot;
        _ &amp;quot;github.com/go-sql-driver/mysql&amp;quot;
        &amp;quot;github.com/jinzhu/gorm&amp;quot;
        _ &amp;quot;github.com/lib/pq&amp;quot;
        &amp;quot;log&amp;quot;
)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;define-structs-models-in-gorm&#34;&gt;define Structs(Models) in gorm&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-golang&#34;&gt;type Device struct {
        DeviceID    int
        UserID      int
        DeviceSN    string
        DeviceImei  string
        Description string
        Sort        int
        Type        int
        Status      int
        Location    string
        Lat         string
        Lng         string
}
func (d Device) TableName() string {
        return &amp;quot;zw_device&amp;quot;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;get-handle-row-in-gorm&#34;&gt;get/handle row in gorm&lt;/h2&gt;

&lt;p&gt;Locsearch实现了查找device_id = 4设备的详细信息&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-golang&#34;&gt;# select by Models
func Locsearch(info string) {
        fmt.Println(info)
        db, err := gorm.Open(&amp;quot;mysql&amp;quot;, &amp;quot;zwjj:zwjj@tcp(gis.anasit.com:3306)/zwjj?charset=utf8&amp;amp;parseTime=True&amp;quot;)
        if err != nil {
                log.Fatal(err)
        }
        db.LogMode(true)
        var device Device
        row := db.Where(&amp;quot;device_id = ?&amp;quot;, &amp;quot;4&amp;quot;).First(&amp;amp;device)
        row.Scan(&amp;amp;device)
        fmt.Println(device.DeviceImei, device.DeviceID, device.Lat)
}


# raw select lat, lng start
	var device Device
        row := db.Table(&amp;quot;zw_device&amp;quot;).Where(&amp;quot;device_id = ?&amp;quot;, &amp;quot;4&amp;quot;).Select(&amp;quot;lat, lng&amp;quot;).Row()
        row.Scan(&amp;amp;device.Lat, &amp;amp;device.Lng)
        fmt.Println(device.Lat)
# raw end

# raw select * start
	var device Device
        row := db.Table(&amp;quot;zw_device&amp;quot;).Where(&amp;quot;device_id = ?&amp;quot;, &amp;quot;4&amp;quot;).Select(&amp;quot;*&amp;quot;)
        row.Scan(&amp;amp;device)
        fmt.Println(device.DeviceImei, device.DeviceID, device.Lat)
# raw end
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>