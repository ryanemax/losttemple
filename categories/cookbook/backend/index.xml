<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cookbook/Backend on 刘雨飏@ANAS联盟</title>
    <link>http://cio.anasit.com/categories/cookbook/backend/</link>
    <description>Recent content in Cookbook/Backend on 刘雨飏@ANAS联盟</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>©2007-2016 Ryn&#39;s Blog</copyright>
    <lastBuildDate>Sat, 02 Jul 2016 15:05:51 +0800</lastBuildDate>
    <atom:link href="http://cio.anasit.com/categories/cookbook/backend/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Openstack/CloudFoundry-IaaS/PaaS选型方案方案草稿</title>
      <link>http://cio.anasit.com/cookbook/backend/paas/</link>
      <pubDate>Sat, 02 Jul 2016 15:05:51 +0800</pubDate>
      
      <guid>http://cio.anasit.com/cookbook/backend/paas/</guid>
      <description>

&lt;h1 id=&#34;写在最前面:6a85bae82ab59432e683babaed4d9e6d&#34;&gt;写在最前面&lt;/h1&gt;

&lt;h2 id=&#34;iaas现状-裸机docker-openstack服务:6a85bae82ab59432e683babaed4d9e6d&#34;&gt;IaaS现状（裸机Docker+OpenStack服务）&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;OpenStack

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://getcloudify.org/2015/12/26/openstack-docker-kubernetes-hybrid-cloud-nfv-orchestration-mano-etsi-cloudify.html&#34;&gt;6 OpenStack &amp;amp; Docker Predictions for 2016&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.linuxidc.com/Linux/2016-01/126953.htm&#34;&gt;2016年六大OpenStack &amp;amp; Docker发展趋势预测&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.linuxidc.com/Linux/2013-08/88186.htm&#34;&gt;OpenStack云计算快速入门教程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.openstack.cn/?p=5596&#34;&gt;Pt. 3 – OpenStack与大厂硬件及新兴开源技术的结合&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.openstack.cn/?p=5600&#34;&gt;OpenStack+NFV 推动电信行业技术变革&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Mesos&lt;/li&gt;
&lt;li&gt;Docker

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.lupaworld.com/article-241959-1.html&#34;&gt;Docker已扎根新一代PaaS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cloud.51cto.com/art/201411/458342.htm&#34;&gt;如果决定使用Docker，是否有必要同时使用OpenStack？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.wenwenyun.com/a/tip/2014/0924/533.html&#34;&gt;深入浅出Docker（一）：Docker核心技术预览&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.wenwenyun.com/a/tip/2014/0924/534.html&#34;&gt;深入浅出Docker（二）：Docker命令行探秘&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.wenwenyun.com/a/tip/2014/0924/535.html&#34;&gt;深入浅出Docker（三）：Docker开源之路&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.wenwenyun.com/a/tip/2014/0924/536.html&#34;&gt;深入浅出Docker（四）：Docker的集成测试部署之道&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.wenwenyun.com/a/tip/2014/1026/1532.html&#34;&gt;深入浅出Docker（五）：基于Fig搭建开发环境&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.wenwenyun.com/a/tip/2014/0926/552.html&#34;&gt;Docker源码分析（一）：Docker架构&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.wenwenyun.com/a/tip/2014/1011/619.html&#34;&gt;Docker源码分析(二)：Docker Client创建与命令执行&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.wenwenyun.com/a/tip/2014/1108/2365.html&#34;&gt;Docker源码分析(三)：Docker Daemon启动&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.wenwenyun.com/a/tip/2014/1126/3406.html&#34;&gt;Docker源码分析(四)：Docker Daemon之NewDaemon实现&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.wenwenyun.com/a/tip/2014/1211/3623.html&#34;&gt;Docker源码分析（五）：Docker Server的创建&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.infoq.com/cn/articles/docker-source-code-analysis-part6&#34;&gt;Docker源码分析（六）：Docker Daemon网络&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;开源的私有云方案，OpenStack独大，与之竞争的产品不多。&lt;/p&gt;

&lt;p&gt;Mesos可以在操作系统层面与OpenStack相互结合&lt;/p&gt;

&lt;p&gt;Docker可以在资源虚拟化层面与OpenStack相互辅助&lt;/p&gt;

&lt;h2 id=&#34;iaas企业私有云需求深度挖掘:6a85bae82ab59432e683babaed4d9e6d&#34;&gt;IaaS企业私有云需求深度挖掘&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cnblogs.com/sammyliu/p/5181992.html&#34;&gt;自动扩展（Auto-scaling）支持&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;多租户和租户隔离 （multi-tenancy and tenancy isolation）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cnblogs.com/sammyliu/p/5290855.html&#34;&gt;混合云（Hybrid cloud）支持&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;主流硬件支持、云快速交付 和 SLA 保证&lt;/li&gt;
&lt;li&gt;大规模扩展性支持&lt;/li&gt;
&lt;li&gt;私有云外围环境支持（包括支持CDN 、商业SDN控制器、防火墙和VPN/专线等）&lt;/li&gt;
&lt;li&gt;良好的可使用性（用户和运维 Dashboard 等）&lt;/li&gt;
&lt;li&gt;向上扩展性（PaaS 和 SaaS 等支撑）&lt;/li&gt;
&lt;li&gt;企业数据中心IT环境支持（包括裸金属/Bare metal、F5 、GPU、跨云网络连通、租户计费、备份等支持）&lt;/li&gt;
&lt;li&gt;行业解决方案&lt;/li&gt;
&lt;li&gt;独立的服务，包括培训、运维等&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://www.cnblogs.com/sammyliu/p/5179414.html&#34;&gt;OpenStack企业私有云新需求（1）：Nova 虚机支持 GPU&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;paas现状:6a85bae82ab59432e683babaed4d9e6d&#34;&gt;PaaS现状&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;CloudFoundry

&lt;ul&gt;
&lt;li&gt;Bluemix采用&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.csdn.net/article/2015-09-28/2825811&#34;&gt;OpenShift负责人谈PaaS、Docker、Kubernetes及与CloudFoundry的竞争&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cnblogs.com/yudar/p/4391535.html&#34;&gt;OpenStack与CloudFoundry简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.oschina.net/translate/openstack-and-cloud-foundry&#34;&gt;OpenStack 和 Cloud Foundry&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Kubernetes（Google开源的Docker容器集群管理系统）

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://dockone.io/article/639&#34;&gt;OpenStack, Kubernetes, Mesos 谁主沉浮？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.csdn.net/article/1970-01-01/2825241&#34;&gt;Google Kubernetes牵手OpenStack 混合云与容器化&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Flynn（基于Docker的PaaS平台）

&lt;ul&gt;
&lt;li&gt;参考文章：&lt;a href=&#34;http://blog.csdn.net/zhangjun2915/article/details/41266133&#34;&gt;Flynn初探：基于Docker的PaaS平台&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;对比Kubernetes&lt;/li&gt;
&lt;li&gt;在应用的抽象上，Flynn与Kubernetes有本质的区别：Flynn的应用管 理单元是App，只对应一个Docker镜像，但可以由这个镜像来启动多个进程，并且每个进程可以单独扩缩容；而Kubernetes的应用管理单元是 Pod，可对应多个不同的Docker镜像，并且Pod内的各个容器保证会运行在相同的机器上，整个Pod作为扩缩容的基本单位。&lt;/li&gt;
&lt;li&gt;另外一个根本的区别是Kubernetes不提供镜像构建与版本管理的功能。因此，Kubernetes只能看成是面向容器而不是面向应用的系统。当然，我们可以在Kubernetes之上扩充这些功能。&lt;/li&gt;
&lt;li&gt;对比Deis&lt;/li&gt;
&lt;li&gt;第一，Deis、Flynn是都是采用Go语言开发；&lt;/li&gt;
&lt;li&gt;第二，Deis完全依赖于CoreOS，而Flynn因为所有组件都可运行在容器里，没有OS的依赖；&lt;/li&gt;
&lt;li&gt;第三，Deis在构建阶段，除了buildpack方式构建外，还支持Dockerfile与镜像直接上传两种方式，相对Flynn更为灵活。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;paas选型及适用范围:6a85bae82ab59432e683babaed4d9e6d&#34;&gt;PaaS选型及适用范围&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;轻量级：Flynn、Deis二选一

&lt;ul&gt;
&lt;li&gt;团队熟悉GO则Flynn、熟悉Python则Deis&lt;/li&gt;
&lt;li&gt;都属于轻量级Docker方案，适合服务器较少的情景&lt;/li&gt;
&lt;li&gt;更加适合灵活的定制，同时也意味着生产环境需要考虑运维成本&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;重量级：CloudFoundry

&lt;ul&gt;
&lt;li&gt;配置较为复杂，初期学习成本相对高&lt;/li&gt;
&lt;li&gt;较为成熟的重量级PaaS方案，生产环境运维成本低&lt;/li&gt;
&lt;li&gt;适合服务器集群或更多服务器中使用&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;docker部署:6a85bae82ab59432e683babaed4d9e6d&#34;&gt;Docker部署&lt;/h1&gt;

&lt;h1 id=&#34;openstack部署:6a85bae82ab59432e683babaed4d9e6d&#34;&gt;OpenStack部署&lt;/h1&gt;

&lt;h2 id=&#34;公司环境参数:6a85bae82ab59432e683babaed4d9e6d&#34;&gt;公司环境参数&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;服务器 Dell PowerEdge T110 II&lt;/li&gt;
&lt;li&gt;网络接入 电信百兆独享&lt;/li&gt;
&lt;li&gt;操作系统 &lt;a href=&#34;http://www.zdnet.com/article/openstacks-top-operating-system-ubuntu-linux/&#34;&gt;Ubuntu 16.04 LTS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;cloud-foundry部署:6a85bae82ab59432e683babaed4d9e6d&#34;&gt;Cloud Foundry部署&lt;/h1&gt;
</description>
    </item>
    
    <item>
      <title>GoLang几种读文件方式的比较</title>
      <link>http://cio.anasit.com/cookbook/backend/golangReadFile/</link>
      <pubDate>Thu, 08 Oct 2015 15:05:51 +0800</pubDate>
      
      <guid>http://cio.anasit.com/cookbook/backend/golangReadFile/</guid>
      <description>

&lt;h1 id=&#34;golang几种读文件方式的比较:be210f7bcd089da2400daa8dd95e01d1&#34;&gt;GoLang几种读文件方式的比较&lt;/h1&gt;

&lt;p&gt;GoLang提供了很多读文件的方式，一般来说常用的有三种。使用Read加上buffer，使用bufio库和ioutil 库。&lt;/p&gt;

&lt;p&gt;那他们的效率如何呢？用一个简单的程序来评测一下：&lt;/p&gt;

&lt;p&gt;Go代码:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;    package main  

    import(  
        &amp;quot;fmt&amp;quot;  
        &amp;quot;os&amp;quot;  
        &amp;quot;flag&amp;quot;  
        &amp;quot;io&amp;quot;  
        &amp;quot;io/ioutil&amp;quot;  
        &amp;quot;bufio&amp;quot;  
        &amp;quot;time&amp;quot;  
    )  

    func read1(path string)string{  
        fi,err := os.Open(path)  
        if err != nil{  
            panic(err)  
        }  
        defer fi.Close()  

        chunks := make([]byte,1024,1024)  
        buf := make([]byte,1024)  
        for{  
            n,err := fi.Read(buf)  
            if err != nil &amp;amp;&amp;amp; err != io.EOF{panic(err)}  
            if 0 ==n {break}  
            chunks=append(chunks,buf[:n]...)  
            // fmt.Println(string(buf[:n]))  
        }  
        return string(chunks)  
    }  

    func read2(path string)string{  
        fi,err := os.Open(path)  
        if err != nil{panic(err)}  
        defer fi.Close()  
        r := bufio.NewReader(fi)  

        chunks := make([]byte,1024,1024)  

        buf := make([]byte,1024)  
        for{  
            n,err := r.Read(buf)  
            if err != nil &amp;amp;&amp;amp; err != io.EOF{panic(err)}  
            if 0 ==n {break}  
            chunks=append(chunks,buf[:n]...)  
            // fmt.Println(string(buf[:n]))  
        }  
        return string(chunks)  
    }  

    func read3(path string)string{  
        fi,err := os.Open(path)  
        if err != nil{panic(err)}  
        defer fi.Close()  
        fd,err := ioutil.ReadAll(fi)  
        // fmt.Println(string(fd))  
        return string(fd)  
    }  

    func main(){  

        flag.Parse()  
        file := flag.Arg(0)  
        f,err := ioutil.ReadFile(file)  
        if err != nil{  
            fmt.Printf(&amp;quot;%s\n&amp;quot;,err)  
            panic(err)  
        }  
        fmt.Println(string(f))  
        start := time.Now()  
        read1(file)  
        t1 := time.Now()  
        fmt.Printf(&amp;quot;Cost time %v\n&amp;quot;,t1.Sub(start))  
        read2(file)  
        t2 := time.Now()  
        fmt.Printf(&amp;quot;Cost time %v\n&amp;quot;,t2.Sub(t1))  
        read3(file)  
        t3 := time.Now()  
        fmt.Printf(&amp;quot;Cost time %v\n&amp;quot;,t3.Sub(t2))  

    }  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行命令go run read.go filename, 制定需要读取的文件就可以了。这里我比较了读取13.7MB的日志文件，三种方式分别消耗的时间是：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;    Cost time 105.006ms  
    Cost time 68.0039ms  
    Cost time 31.0018ms  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;读取29.3MB的媒体文件：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;    Cost time 390.0223ms  
    Cost time 194.0111ms  
    Cost time 83.0048ms  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;读取302MB的媒体文件:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;    Cost time 40.8043338s  
    Cost time 1m5.0407201s  
    Cost time 8.8155043s  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个差距就很明显了，ioutil提供的方法效率就是高。有空可以再从代码层面再去分析一下。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Golang database/sql &amp; GORM</title>
      <link>http://cio.anasit.com/cookbook/backend/golangsqlorm/</link>
      <pubDate>Thu, 08 Oct 2015 15:05:51 +0800</pubDate>
      
      <guid>http://cio.anasit.com/cookbook/backend/golangsqlorm/</guid>
      <description>

&lt;h1 id=&#34;0-models写法技巧及migration标准:2ab5870f91c2ce37f07c26e87656e181&#34;&gt;0.Models写法技巧及Migration标准&lt;/h1&gt;

&lt;h2 id=&#34;法则:2ab5870f91c2ce37f07c26e87656e181&#34;&gt;法则&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;基本满足大驼峰命名法则&lt;/strong&gt;
首字母大写
&amp;ldquo;_&amp;rdquo; 忽略后大写&lt;/p&gt;

&lt;h2 id=&#34;实例:2ab5870f91c2ce37f07c26e87656e181&#34;&gt;实例&lt;/h2&gt;

&lt;p&gt;device_id 对应 DeviceID
create_time 对应 CreateTime
location 对应 Location&lt;/p&gt;

&lt;h2 id=&#34;官方实例:2ab5870f91c2ce37f07c26e87656e181&#34;&gt;官方实例&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type User struct {
    ID           int
    Birthday     time.Time
    Age          int
    Name         string  `sql:&amp;quot;size:255&amp;quot;` // Default size for string is 255, you could reset it with this tag
    Num          int     `sql:&amp;quot;AUTO_INCREMENT&amp;quot;`
    CreatedAt    time.Time
    UpdatedAt    time.Time
    DeletedAt    *time.Time

    Emails            []Email         // One-To-Many relationship (has many)
    BillingAddress    Address         // One-To-One relationship (has one)
    BillingAddressID  sql.NullInt64   // Foreign key of BillingAddress
    ShippingAddress   Address         // One-To-One relationship (has one)
    ShippingAddressID int             // Foreign key of ShippingAddress
    IgnoreMe          int `sql:&amp;quot;-&amp;quot;`   // Ignore this field
    Languages         []Language `gorm:&amp;quot;many2many:user_languages;&amp;quot;` // Many-To-Many relationship, &#39;user_languages&#39; is join table
}

type Email struct {
    ID      int
    UserID  int     `sql:&amp;quot;index&amp;quot;` // Foreign key (belongs to), tag `index` will create index for this field when using AutoMigrate
    Email   string  `sql:&amp;quot;type:varchar(100);unique_index&amp;quot;` // Set field&#39;s sql type, tag `unique_index` will create unique index
    Subscribed bool
}

type Address struct {
    ID       int
    Address1 string         `sql:&amp;quot;not null;unique&amp;quot;` // Set field as not nullable and unique
    Address2 string         `sql:&amp;quot;type:varchar(100);unique&amp;quot;`
    Post     sql.NullString `sql:&amp;quot;not null&amp;quot;`
}

type Language struct {
    ID   int
    Name string `sql:&amp;quot;index:idx_name_code&amp;quot;` // Create index with name, and will create combined index if find other fields defined same name
    Code string `sql:&amp;quot;index:idx_name_code&amp;quot;` // `unique_index` also works
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;1-gorm实践:2ab5870f91c2ce37f07c26e87656e181&#34;&gt;1.GORM实践&lt;/h1&gt;

&lt;h2 id=&#34;数据库:2ab5870f91c2ce37f07c26e87656e181&#34;&gt;数据库&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;MariaDB [zwjj]&amp;gt; desc zw_device;
+-------------+---------------------+------+-----+---------+----------------+
| Field       | Type                | Null | Key | Default | Extra          |
+-------------+---------------------+------+-----+---------+----------------+
| device_id   | int(10) unsigned    | NO   | PRI | NULL    | auto_increment |
| user_id     | int(10)             | YES  |     | NULL    |                |
| device_sn   | varchar(32)         | NO   |     | NULL    |                |
| device_imei | varchar(32)         | NO   |     | NULL    |                |
| description | text                | NO   |     | NULL    |                |
| sort        | int(10) unsigned    | NO   |     | NULL    |                |
| type        | tinyint(1) unsigned | NO   |     | 0       |                |
| status      | tinyint(1)          | NO   |     | 1       |                |
| location    | varchar(32)         | YES  |     | NULL    |                |
| lat         | varchar(255)        | YES  |     | NULL    |                |
| lng         | varchar(125)        | NO   |     | NULL    |                |
| last_time   | int(10) unsigned    | NO   |     | NULL    |                |
| create_time | int(10) unsigned    | NO   |     | NULL    |                |
+-------------+---------------------
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;import:2ab5870f91c2ce37f07c26e87656e181&#34;&gt;import&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-golang&#34;&gt;import(
        &amp;quot;fmt&amp;quot;
        _ &amp;quot;github.com/go-sql-driver/mysql&amp;quot;
        &amp;quot;github.com/jinzhu/gorm&amp;quot;
        _ &amp;quot;github.com/lib/pq&amp;quot;
        &amp;quot;log&amp;quot;
)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;define-structs-models-in-gorm:2ab5870f91c2ce37f07c26e87656e181&#34;&gt;define Structs(Models) in gorm&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-golang&#34;&gt;type Device struct {
        DeviceID    int
        UserID      int
        DeviceSN    string
        DeviceImei  string
        Description string
        Sort        int
        Type        int
        Status      int
        Location    string
        Lat         string
        Lng         string
}
func (d Device) TableName() string {
        return &amp;quot;zw_device&amp;quot;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;get-handle-row-in-gorm:2ab5870f91c2ce37f07c26e87656e181&#34;&gt;get/handle row in gorm&lt;/h2&gt;

&lt;p&gt;Locsearch实现了查找device_id = 4设备的详细信息&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-golang&#34;&gt;# select by Models
func Locsearch(info string) {
        fmt.Println(info)
        db, err := gorm.Open(&amp;quot;mysql&amp;quot;, &amp;quot;zwjj:zwjj@tcp(gis.anasit.com:3306)/zwjj?charset=utf8&amp;amp;parseTime=True&amp;quot;)
        if err != nil {
                log.Fatal(err)
        }
        db.LogMode(true)
        var device Device
        row := db.Where(&amp;quot;device_id = ?&amp;quot;, &amp;quot;4&amp;quot;).First(&amp;amp;device)
        row.Scan(&amp;amp;device)
        fmt.Println(device.DeviceImei, device.DeviceID, device.Lat)
}


# raw select lat, lng start
	var device Device
        row := db.Table(&amp;quot;zw_device&amp;quot;).Where(&amp;quot;device_id = ?&amp;quot;, &amp;quot;4&amp;quot;).Select(&amp;quot;lat, lng&amp;quot;).Row()
        row.Scan(&amp;amp;device.Lat, &amp;amp;device.Lng)
        fmt.Println(device.Lat)
# raw end

# raw select * start
	var device Device
        row := db.Table(&amp;quot;zw_device&amp;quot;).Where(&amp;quot;device_id = ?&amp;quot;, &amp;quot;4&amp;quot;).Select(&amp;quot;*&amp;quot;)
        row.Scan(&amp;amp;device)
        fmt.Println(device.DeviceImei, device.DeviceID, device.Lat)
# raw end
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Golang代码组织最佳方案</title>
      <link>http://cio.anasit.com/cookbook/backend/golangincase/</link>
      <pubDate>Thu, 08 Oct 2015 15:05:51 +0800</pubDate>
      
      <guid>http://cio.anasit.com/cookbook/backend/golangincase/</guid>
      <description>

&lt;h1 id=&#34;golang代码组织最佳方案:5a6eb3fc45e97f86a8b1fbab0c312535&#34;&gt;《Golang代码组织最佳方案》&lt;/h1&gt;

&lt;h2 id=&#34;案例一-不建议的偷懒结构:5a6eb3fc45e97f86a8b1fbab0c312535&#34;&gt;案例一：不建议的偷懒结构&lt;/h2&gt;

&lt;p&gt;$gopath/src/github.com/ryanemax/device/pkg_phone/phone.go&lt;/p&gt;

&lt;p&gt;$gopath/src/github.com/ryanemax/device/main.go&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import &amp;quot;./pkg_phone&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;案例二-docker中也不建议的偷懒结构:5a6eb3fc45e97f86a8b1fbab0c312535&#34;&gt;案例二：Docker中也不建议的偷懒结构&lt;/h2&gt;

&lt;p&gt;gonet2示例：github.com/gonet2/game&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;Dockerfile # Docker环境文件
src/proto # 包proto
src/registry # 包registry
src/game/service.go # game主程
  import(
    &amp;quot;regitry&amp;quot;
    &amp;quot;proto&amp;quot;
    )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;虽然docker中环境纯净，但多个$GOPATH中如果都存在src/registry名称的库，则会产生冲突。&lt;/p&gt;

&lt;h2 id=&#34;最佳结构方式:5a6eb3fc45e97f86a8b1fbab0c312535&#34;&gt;最佳结构方式&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;# 案例一中
  import &amp;quot;github.com/ryanemax/device/pkg_phone&amp;quot;
# 案例二中
  import (
    &amp;quot;github.com/gonet2/src/registry&amp;quot;
    &amp;quot;github.com/gonet2/src/proto&amp;quot;
  )
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;golang实用的第三方库:5a6eb3fc45e97f86a8b1fbab0c312535&#34;&gt;《Golang实用的第三方库》&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/avelino/awesome-go&#34;&gt;https://github.com/avelino/awesome-go&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;命令行应用开发库:5a6eb3fc45e97f86a8b1fbab0c312535&#34;&gt;命令行应用开发库&lt;/h2&gt;

&lt;h3 id=&#34;cobra-案例-hugo:5a6eb3fc45e97f86a8b1fbab0c312535&#34;&gt;Cobra,案例：Hugo&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/spf13/cobra&#34;&gt;https://github.com/spf13/cobra&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;文本界面应用开发库:5a6eb3fc45e97f86a8b1fbab0c312535&#34;&gt;文本界面应用开发库&lt;/h2&gt;

&lt;h3 id=&#34;color-简单的命令行颜色输出:5a6eb3fc45e97f86a8b1fbab0c312535&#34;&gt;color 简单的命令行颜色输出&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/fatih/color&#34;&gt;https://github.com/fatih/color&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://camo.githubusercontent.com/3cef9169d42dd94bd7299782d691396027d688a4/687474703a2f2f692e696d6775722e636f6d2f63314a49306c412e706e67&#34; alt=&#34;color&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;termui-完整的命令行应用界面-基于https-github-com-nsf-termbox-go:5a6eb3fc45e97f86a8b1fbab0c312535&#34;&gt;Termui 完整的命令行应用界面(基于&lt;a href=&#34;https://github.com/nsf/termbox-go&#34;&gt;https://github.com/nsf/termbox-go&lt;/a&gt;)&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/gizak/termui&#34;&gt;https://github.com/gizak/termui&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gizak/termui/master/_example/dashboard.gif&#34; alt=&#34;termui&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;实用的原生库:5a6eb3fc45e97f86a8b1fbab0c312535&#34;&gt;实用的原生库&lt;/h1&gt;

&lt;h2 id=&#34;encoding-hex:5a6eb3fc45e97f86a8b1fbab0c312535&#34;&gt;encoding/hex&lt;/h2&gt;

&lt;p&gt;常用于解析网络通信协议中的BCD码流&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pdata := byte[]{0x12,0x34,0x56,0x78}
data_imei := hex.EncodeToString(pdata[0:3])
fmt.Println(data_imei)
## 输出结果为12345678
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;strconv:5a6eb3fc45e97f86a8b1fbab0c312535&#34;&gt;strconv&lt;/h2&gt;

&lt;p&gt;常用与各数制与字符之间的转换&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;## 常规方式：转换int类型12，到二进制字符串
fint := strconv.FormatInt(12, 2)
fmt.Println(&amp;quot;FormatBinary 12:&amp;quot;, fint)
## 输出结果为1100


## 快捷方式：转换int类型12，到二进制字符串
bs := fmt.Sprintf(&amp;quot;%b&amp;quot;,12)
## bs输出结果为1100

## 快捷方式：转换任意数制到int类型
fmt.Printf(&amp;quot;电压等级：%d\n&amp;quot;, content[1])
plev, err := strconv.Atoi(fmt.Sprintf(&amp;quot;%d&amp;quot;, content[1]))
if err != nil {
        Warning(err.Error())
}
device.StatusPowerLev = plev

fmt.Printf(&amp;quot;GSM信号强度等级:%d\n&amp;quot;, content[2])
gsmlev, err := strconv.Atoi(fmt.Sprintf(&amp;quot;%d&amp;quot;, content[2]))
if err != nil {
        Warning(err.Error())
}
device.StatusGsmLev = gsmlev

## 快捷方式：Byte时间数据，转时间戳
## gpstime := []byte{0x0f, 0x0c, 0x0e, 0x11, 0x01, 0x0c}
func ParseTime(gpstime []byte) time.Time {
        //解析六个字节的时间数据为标准的时间戳
        var ts string
        for _, v := range gpstime {
        //将每个字节格式化输出成十进制字符串
                ts += fmt.Sprintf(&amp;quot;%2d&amp;quot;, v)
        }
        //替换格式化输出导致的整数高位空格
        ts = strings.Replace(ts, &amp;quot; &amp;quot;, &amp;quot;0&amp;quot;, -1)

        //时间戳格式化
        const TimeFormat = &amp;quot;2006-01-02 15:04:05&amp;quot;
        t, err := time.Parse(TimeFormat, &amp;quot;20&amp;quot;+ts[0:2]+&amp;quot;-&amp;quot;+ts[2:4]+&amp;quot;-&amp;quot;+ts[4:6]+&amp;quot; &amp;quot;+ts[6:8]+&amp;quot;:&amp;quot;+ts[8:10]+&amp;quot;:&amp;quot;+ts[10:12])
        if err != nil {
                //Error(err.Error())
        }
        //Warning(err.Error())
        //Info(&amp;quot;定位时间：&amp;quot;, t)
        return t
}


&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>MBaaS产品调研及私有云解决方案草稿</title>
      <link>http://cio.anasit.com/cookbook/backend/baas/</link>
      <pubDate>Thu, 08 Oct 2015 15:05:51 +0800</pubDate>
      
      <guid>http://cio.anasit.com/cookbook/backend/baas/</guid>
      <description>

&lt;h1 id=&#34;热门baas简介:f23172eb85f1063ed56abfa5fd4c95ce&#34;&gt;热门baas简介&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://www.techweb.com.cn/network/virtual/2016-01-05/2252623.shtml&#34;&gt;应用开发不可不知的五大BaaS后端云服务 &lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;baas公有云:f23172eb85f1063ed56abfa5fd4c95ce&#34;&gt;baas公有云&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;firebase google收购的专业baas服务，完美整合angular2，在华无法使用&lt;/li&gt;
&lt;li&gt;wilddog 国内，仿firebase，api通用&lt;/li&gt;
&lt;li&gt;parse 主要提供移动端推送及统计服务，官方GO，开源版Nodejs&lt;/li&gt;
&lt;li&gt;LeanCloud 国内，仿parse，api通用&lt;/li&gt;
&lt;li&gt;bluemix IBM创办的paas平台，附带baas服务，2016年6月已入华&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;baas私有云:f23172eb85f1063ed56abfa5fd4c95ce&#34;&gt;baas私有云&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;appery.io 最完美的HybirdApp云服务MBaaS，配套在线设计IDE，在线Cordova打包&lt;/li&gt;
&lt;li&gt;dreamfactory 针对RESTful APIs的资源控制，基于Laravel+Swagger2&lt;/li&gt;
&lt;li&gt;kinvey&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;市场分析:f23172eb85f1063ed56abfa5fd4c95ce&#34;&gt;市场分析&lt;/h1&gt;

&lt;h2 id=&#34;对传统开发模式带来的影响:f23172eb85f1063ed56abfa5fd4c95ce&#34;&gt;对传统开发模式带来的影响&lt;/h2&gt;

&lt;p&gt;前端影响 &lt;a href=&#34;https://www.zhihu.com/question/27087120&#34;&gt;https://www.zhihu.com/question/27087120&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;后端影响 &lt;a href=&#34;https://www.zhihu.com/question/29600252&#34;&gt;https://www.zhihu.com/question/29600252&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;开发人员的岗位结构发生转型，简化重复的抽象操作，关注业务本身逻辑&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;前端／客户端＋少许云端js代码&lt;/li&gt;
&lt;li&gt;后台 负责数据的获取（爬虫）分析处理（商业智能）预测判断（机器学习）&lt;/li&gt;
&lt;li&gt;后端的服务化，API化；  前端的多样化，静态化&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;页面逐渐应用化。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;从最早的B/S产品架构看，页面层属于MVC中的V，是由服务端输出的，服务端的输出结果是页面。&lt;/p&gt;

&lt;p&gt;［M］－［C］－［V］ ｜ 浏览器&lt;/p&gt;

&lt;p&gt;后来逐步AJAX化了之后，也增加了一些输出数据的接口。&lt;/p&gt;

&lt;p&gt;［M］－［C］－［V / Data］ ｜ 浏览器&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;响应式程序，俗称后端的前台 API GET/POST响应&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;大部分会被baas替代，原因是其逻辑很容易被抽象，即便少许复杂的也可通过云端的js／nodejs搞定&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;非响应式程序，俗称后端的后台程序&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;例如自动化运维 机器学习 爬虫 复杂业务数据分析处理 大数据。
  不会被替代，但会发展更加蓬勃，人才涌入及工作简化。&lt;/p&gt;

&lt;h1 id=&#34;mbaas-是baas在mobile细分领域的应用:f23172eb85f1063ed56abfa5fd4c95ce&#34;&gt;MBaaS 是BaaS在mobile细分领域的应用&lt;/h1&gt;

&lt;h2 id=&#34;产品结构简介:f23172eb85f1063ed56abfa5fd4c95ce&#34;&gt;产品结构简介&lt;/h2&gt;

&lt;p&gt;参考 appery.io 整理出一下必备功能模块&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;App Builder

&lt;ul&gt;
&lt;li&gt;Cross-Platform Development&lt;/li&gt;
&lt;li&gt;Custom UI Components&lt;/li&gt;
&lt;li&gt;Write Custom JS or CSS&lt;/li&gt;
&lt;li&gt;Model-Based Data Structure&lt;/li&gt;
&lt;li&gt;Advanced Storage Layer&lt;/li&gt;
&lt;li&gt;Source Code Editing&lt;/li&gt;
&lt;li&gt;App Deployment&lt;/li&gt;
&lt;li&gt;Certificate Management&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Backend Services

&lt;ul&gt;
&lt;li&gt;Database&lt;/li&gt;
&lt;li&gt;Push Notifications&lt;/li&gt;
&lt;li&gt;User Management&lt;/li&gt;
&lt;li&gt;File Management&lt;/li&gt;
&lt;li&gt;Visual Web Console&lt;/li&gt;
&lt;li&gt;Instant REST APIs&lt;/li&gt;
&lt;li&gt;Query Editor&lt;/li&gt;
&lt;li&gt;Server Code&lt;/li&gt;
&lt;li&gt;Jobs Scheduler&lt;/li&gt;
&lt;li&gt;Web Hooks&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;API Express&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;appbuilder:f23172eb85f1063ed56abfa5fd4c95ce&#34;&gt;AppBuilder&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;ionic creator

&lt;ul&gt;
&lt;li&gt;ionic官方开发&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;appgyver

&lt;ul&gt;
&lt;li&gt;支持PhoneGap&lt;/li&gt;
&lt;li&gt;与DreamFactory合作&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;backend-services:f23172eb85f1063ed56abfa5fd4c95ce&#34;&gt;Backend Services&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;DreamFactory

&lt;ul&gt;
&lt;li&gt;提供RESTful全系列api构建&lt;/li&gt;
&lt;li&gt;缺少push推送功能，缺少即时通信功能&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Parse Server+Dashboard

&lt;ul&gt;
&lt;li&gt;实时推送&lt;/li&gt;
&lt;li&gt;数据分析&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;firebase&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;backend-service-评比选型:f23172eb85f1063ed56abfa5fd4c95ce&#34;&gt;Backend Service 评比选型&lt;/h1&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;类目&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Firebase&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;DreamFactory&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Parse&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;私有部署&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;不支持&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;免费版开源&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;完全开源&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;导入导出&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;可整体导出为.dfpkg2文件&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;有&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;[Auth] 验证体系&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;用户User&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;用户User+角色Role&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;User+Role+Session&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;[Data/Schema] 数据操作 RESTful&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;有&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;有&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;有&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;[Storage] 文件存储&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;有&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;有(多选)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;有&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;[DB Ext] 数据库扩展性&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;无法扩展&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;可选用mysql、pgsql等驱动，便于数据库级别接入其他系统&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;mongodb&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;[ng2sdk]&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/angular/angularfire2&#34;&gt;angularfire2&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/dreamfactorysoftware/angular2-sdk&#34;&gt;angular2-sdk&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;暂无&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;[Push] 消息推送&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;有&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;无&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;有&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;[Analytics] APP分析&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;有&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;无&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;有&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;[Crash Report] 错误反馈&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;有&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;无&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;[RealTime Communication] 实时通信&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;websocket&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;无&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>Bluemix中可替代BaaS的服务及介绍</title>
      <link>http://cio.anasit.com/cookbook/backend/bluemix/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://cio.anasit.com/cookbook/backend/bluemix/</guid>
      <description>

&lt;h1 id=&#34;对比parse-com:a7861ad4a9f03fd7eedd0d24ba963e33&#34;&gt;对比Parse.com&lt;/h1&gt;

&lt;h2 id=&#34;数据curd服务-mobile-application-content-manager:a7861ad4a9f03fd7eedd0d24ba963e33&#34;&gt;数据CURD服务：Mobile Application Content Manager&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://macm-servicebrokerapp.mybluemix.net/screenshots/ContentItem.png&#34;&gt;Cate&lt;/a&gt;
&lt;a href=&#34;http://macm-servicebrokerapp.mybluemix.net/screenshots/Template.png&#34;&gt;Content&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;功能对比，功能完善度不如parse&lt;/li&gt;
&lt;li&gt;价格对比，性价比不如parse&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;| -     | 功能 | 价格 |
| :&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;- | :&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;- | :- |
| 免费套餐  | 无 | 无 |
| 基本套餐  | 一百万次 API 调用 | US$ 500.00 USD/百万 API 调用 |
| - | 一千条内容项 | US$ 500.00 USD/千条内容项 |
| - | 十个授权用户 | US$ 50.00 USD/十个授权用户 |&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>parse服务学习指引</title>
      <link>http://cio.anasit.com/cookbook/backend/parse-learn/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://cio.anasit.com/cookbook/backend/parse-learn/</guid>
      <description>

&lt;h1 id=&#34;准备环境:5f6a21ef3c944debe2d2c50aec341740&#34;&gt;准备环境&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;系统环境

&lt;ul&gt;
&lt;li&gt;npm&lt;/li&gt;
&lt;li&gt;nodejs&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;服务端

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ParsePlatform/parse-server&#34;&gt;parse-server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;mongodb&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;管理端

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ParsePlatform/parse-dashboard&#34;&gt;parse-dashboard&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;学习参考:5f6a21ef3c944debe2d2c50aec341740&#34;&gt;学习参考&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;客户端文档 &lt;a href=&#34;https://parseplatform.github.io&#34;&gt;https://parseplatform.github.io&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;REST文档 &lt;a href=&#34;https://parseplatform.github.io/docs/rest/guide/&#34;&gt;https://parseplatform.github.io/docs/rest/guide/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;JS文档 &lt;a href=&#34;https://parseplatform.github.io/docs/js/guide/&#34;&gt;https://parseplatform.github.io/docs/js/guide/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PHP文档 &lt;a href=&#34;https://parseplatform.github.io/docs/php/guide/&#34;&gt;https://parseplatform.github.io/docs/php/guide/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;服务端文档 &lt;a href=&#34;https://github.com/ParsePlatform/parse-server/wiki/Parse-Server-Guide&#34;&gt;https://github.com/ParsePlatform/parse-server/wiki/Parse-Server-Guide&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;server:5f6a21ef3c944debe2d2c50aec341740&#34;&gt;Server&lt;/h1&gt;
</description>
    </item>
    
    <item>
      <title>如何在Bluemix上搭建parse-server服务</title>
      <link>http://cio.anasit.com/cookbook/backend/parse-server-on-bluemix/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://cio.anasit.com/cookbook/backend/parse-server-on-bluemix/</guid>
      <description>

&lt;h1 id=&#34;参考资料:0ae39d3b9d7e50b8ddad03790f0a0f19&#34;&gt;参考资料&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.ibm.com/clouddataservices/2016/01/29/parse-on-ibm-bluemix/&#34;&gt;Parse on IBM Bluemix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.ibm.com/bluemix/2016/02/01/migrating-from-parse-to-bluemix/&#34;&gt;Migrating from Parse to Bluemix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/35466853/parse-server-migration-to-ibm-bluemix&#34;&gt;Parse server migration to IBM bluemix&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;自动配置步骤:0ae39d3b9d7e50b8ddad03790f0a0f19&#34;&gt;自动配置步骤&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/ibm-cds-labs/parse-on-bluemix.git
cf push Your-App-Name-On-Bluemix
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;手动配置步骤:0ae39d3b9d7e50b8ddad03790f0a0f19&#34;&gt;手动配置步骤&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;注册Bluemix账号 &lt;a href=&#34;http://bluemix.net&#34;&gt;http://bluemix.net&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;创建Cloud Foundry应用

&lt;ul&gt;
&lt;li&gt;选择Web Application&lt;/li&gt;
&lt;li&gt;但不选择任何移动服务（Mobile Client Access等）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;选择SDK for Node.js

&lt;ul&gt;
&lt;li&gt;APP Name 起名 parse-on-bluemix&lt;/li&gt;
&lt;li&gt;点击完成/FINISH&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;创建MongoDB实例（或直接使用已有数据库）

&lt;ul&gt;
&lt;li&gt;在parse-on-bluemix中选择，ADD A SERVICE OR API&lt;/li&gt;
&lt;li&gt;寻找分类 Data and Analytics&lt;/li&gt;
&lt;li&gt;选择新建 MongoDB by Compose&lt;/li&gt;
&lt;li&gt;按需配置&lt;/li&gt;
&lt;li&gt;本文不详细介绍数据库配置&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;配置parse-server环境变量

&lt;ul&gt;
&lt;li&gt;进入CloudFoundry选择已有应用&lt;/li&gt;
&lt;li&gt;Environment  Varieties&lt;/li&gt;
&lt;li&gt;选择USER-DEFINED，具体参数参照Parse使用文档&lt;/li&gt;
&lt;li&gt;APP_ID xxxxxxx&lt;/li&gt;
&lt;li&gt;MASTER_KEY xxxxxxx&lt;/li&gt;
&lt;li&gt;PARSE_MOUNT /parse-server&lt;/li&gt;
&lt;li&gt;REST_KEY xxxxxxx&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
  </channel>
</rss>