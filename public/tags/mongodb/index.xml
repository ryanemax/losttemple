<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mongodb on 刘雨飏@ANAS联盟</title>
    <link>https://cio.anasit.com/tags/mongodb/index.xml</link>
    <description>Recent content in Mongodb on 刘雨飏@ANAS联盟</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>©2007-2016 Ryn&#39;s Blog</copyright>
    <atom:link href="https://cio.anasit.com/tags/mongodb/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>MongoDB数据模型/结构设计中重要的经验法则</title>
      <link>https://cio.anasit.com/cookbook/database/mongoOneToN/</link>
      <pubDate>Sun, 08 Nov 2015 15:05:51 +0800</pubDate>
      
      <guid>https://cio.anasit.com/cookbook/database/mongoOneToN/</guid>
      <description>

&lt;h1 id=&#34;mongodb数据模型-结构设计中重要的经验法则&#34;&gt;MongoDB数据模型/结构设计中重要的经验法则&lt;/h1&gt;

&lt;p&gt;One-to-N：&lt;a href=&#34;http://www.tuicool.com/articles/iARr2m&#34;&gt;MongoDB数据结构设计中6条重要的经验法则，part 1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;双向关联、反范式设计：&lt;a href=&#34;http://my.oschina.net/mihumao/blog/424645&#34;&gt;MongoDB数据库设计中6条重要的经验法则，part 2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;经验法则总结：&lt;a href=&#34;http://my.oschina.net/mihumao/blog/424650&#34;&gt;MongoDB数据库设计中6条重要的经验法则，part 3&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Part1结论：所以，即使这种简单的讨论也有能察觉出mongobd的建模和关系模型建模的不同之处。你必须要注意一下两个因素：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Will the entities on the “N” side of the One-to-N ever need to stand alone?
一对多中的多是否需要一个单独的实体。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;What is the cardinality of the relationship: is it one-to-few; one-to-many; or one-to-squillions?
这个关系中集合的规模是一对很少，多，还是非常多。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Based on these factors, you can pick one of the three basic One-to-N schema designs:
基于以上因素来决定采取一下三种建模的方式：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;One-to-Few（内联）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一对很少且不需要单独访问内嵌内容的情况下可以使用内嵌多的一方的方案。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;One-to-Many（子引用）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一对多且多的一段内容因为各种理由需要单独存在的情况下可以使用通过数组的方式引用多的一方的方案。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;One-to-Squillions（父引用）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一对非常多的情况下，请将一的那端引用签入进多端的方案。&lt;/p&gt;

&lt;h2 id=&#34;one-to-few-一对很少&#34;&gt;One-to-Few（一对很少）&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;## &amp;lt; db.person.findOne()
{
    &amp;quot;name&amp;quot;: &amp;quot;KateMonster&amp;quot;,
    &amp;quot;ssn&amp;quot;: &amp;quot;123-456-7890&amp;quot;,
    &amp;quot;addresses&amp;quot;: [
        {
            &amp;quot;street&amp;quot;: &amp;quot;123SesameSt&amp;quot;,
            &amp;quot;city&amp;quot;: &amp;quot;Anytown&amp;quot;,
            &amp;quot;cc&amp;quot;: &amp;quot;USA&amp;quot;
        },
        {
            &amp;quot;street&amp;quot;: &amp;quot;123AvenueQ&amp;quot;,
            &amp;quot;city&amp;quot;: &amp;quot;NewYork&amp;quot;,
            &amp;quot;cc&amp;quot;: &amp;quot;USA&amp;quot;
        }
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;适用场景&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一个人的地址为例，这时候使用内嵌文档是很合适，可以在person文档中嵌入数组&lt;/p&gt;

&lt;p&gt;这种设计拥有内嵌文档设计中所有的优缺点。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;最主要的优点&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;不需要单独执行一条语句去获取内嵌的内容。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;最主要的缺点&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;无法把这些内嵌文档当做单独的实体去访问。&lt;/p&gt;

&lt;p&gt;例如，如果你是在对一个任务跟踪系统进行建模，每个用户将会被分配若干个任务。内嵌这些任务到用户文档在遇到“查询昨天所有的任务”这样的问题时将会非常困难。我会在下一篇文章针对这个用例提供一些适当的设计。&lt;/p&gt;

&lt;h2 id=&#34;one-to-many-一对多&#34;&gt;One-to-Many（一对多）&lt;/h2&gt;

&lt;p&gt;以商品替换零件订货系统为例。每个商品有数百个可替换的零件，但是不会超过数千个。这个用例很适合使用间接引用-将零件的objectid作为数组存放在商品文档中(在这个例子中我使用更加易读的2字节的ObjectID，现实世界中他们可能是由12个字节组成的)。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;## &amp;lt;db.parts.findOne()
{
    &amp;quot;_id&amp;quot;: &amp;quot;ObjectID(‘AAAA’)&amp;quot;,
    &amp;quot;partno&amp;quot;: &amp;quot;123-aff-456&amp;quot;,
    &amp;quot;name&amp;quot;: &amp;quot;#4grommet&amp;quot;,
    &amp;quot;qty&amp;quot;: 94,
    &amp;quot;cost&amp;quot;: 0.94,
    &amp;quot;price&amp;quot;: 3.99
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;每个产品的文档中parts数组中将会存放多个零件的ObjectID&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;## &amp;lt; db.products.findOne()
{
    &amp;quot;name&amp;quot;: &amp;quot;left-handedsmokeshifter&amp;quot;,
    &amp;quot;manufacturer&amp;quot;: &amp;quot;AcmeCorp&amp;quot;,
    &amp;quot;catalog_number&amp;quot;: 1234,
    &amp;quot;parts&amp;quot;: [//arrayofreferencestoPartdocuments
        &amp;quot;ObjectID(&#39;AAAA&#39;)&amp;quot;,
        //referencetothe#4grommetabove
        &amp;quot;ObjectID(&#39;F17C&#39;)&amp;quot;,
        //referencetoadifferentPart
        &amp;quot;ObjectID(&#39;D2AA&#39;)&amp;quot;,
        //etc
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在获取特定产品中所有零件，需要一个应用层级别的join&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Fetch the Product document identified by this catalog number
&amp;lt; product = db.products.findOne({catalog_number: 1234});

// Fetch all the Parts that are linked to this Product
&amp;lt; product_parts = db.parts.find({_id: { $in : product.parts } } ).toArray() ;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这中引用的方式是对内嵌优缺点的补充。&lt;/p&gt;

&lt;p&gt;每个零件是个单独的文档，可以很容易的独立去搜索和更新他们。&lt;/p&gt;

&lt;p&gt;使用这种建模方式需要考虑的一个问题是需要一条单独的语句去获取零件的具体内容&lt;/p&gt;

&lt;p&gt;这种建模方式中的零件部分可以被多个产品使用，所以在多对多时不需要一张单独的连接表。&lt;/p&gt;

&lt;h2 id=&#34;one-to-squillions-一对非常多&#34;&gt;One-to-Squillions(一对非常多)&lt;/h2&gt;

&lt;p&gt;我们用一个收集不同机器日志的例子来讨论一对很多的问题。&lt;/p&gt;

&lt;p&gt;由于每个mongodb的文档有&lt;strong&gt;16M的大小限制&lt;/strong&gt;，所以即使你是存储ObjectID也是不够的。&lt;/p&gt;

&lt;p&gt;我们可以使用很经典的处理方法&lt;strong&gt;父级引用&lt;/strong&gt;用一个文档存储主题，在每个日志文档中保存这个主机的ObjectID。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;&amp;lt; db.hosts.findOne()

{
    &amp;quot;_id&amp;quot;: &amp;quot;ObjectID(‘AAAB’)&amp;quot;,
    &amp;quot;name&amp;quot;: &amp;quot;goofy.example.com&amp;quot;,
    &amp;quot;ipaddr&amp;quot;: &amp;quot;127.66.66.66&amp;quot;
}

&amp;lt; db.logmsg.findOne()

{
    &amp;quot;time&amp;quot;: &amp;quot;ISODate(“2014-03-28T09: 42: 41.382Z”)&amp;quot;,
    &amp;quot;message&amp;quot;: &amp;quot;cpuisonfire!&amp;quot;,
    &amp;quot;host&amp;quot;: &amp;quot;ObjectID(‘AAAB’)&amp;quot;//ReferencetotheHostdocument
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以下是个稍微不同的应用级别的join用来查找一台主机最近5000条的日志信息&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// find the parent ‘host’ document

&amp;lt; host = db.hosts.findOne({ipaddr : ’127.66.66.66′}); // assumes unique index

// find the most recent 5000 log message documents linked to that host

&amp;lt; last_5k_msg = db.logmsg.find({host: host._id}).sort({time : -1}).limit(5000).toArray()
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>